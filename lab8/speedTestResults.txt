## InsertInOrderSpeedTest

 This program inserts lexicographically increasing Stringsinto Maps as <String, Integer> pairs.

--
Enter # strings to insert into ULLMap: 10000
class ULLMap: 0.90 sec

Enter # strings to insert into MyHashMap: 10000
class MyHashMap: 0.03 sec

Enter # strings to insert into Java's HashMap: 10000
Java's Built-in HashMap: 0.02 sec
--
Enter # strings to insert into ULLMap: 50000
--Stack Overflow -- couldn't add 50000 strings.

Enter # strings to insert into MyHashMap: 1000000
class MyHashMap: 1.48 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 0.77 sec
--
Enter # strings to insert into MyHashMap: 500000
class MyHashMap: 0.53 sec

Enter # strings to insert into Java's HashMap: 500000
Java's Built-in HashMap: 0.68 sec

----------------------------

## InsertRandomSpeedTest

 This program inserts random Strings of length L
 Into different types of maps as <String, Integer> pairs.

What would you like L to be?: 10000

Enter # strings to insert into ULLMap: 10000
class ULLMap: 2.25 sec

Enter # strings to insert into your MyHashMap: 10000
class MyHashMap: 1.88 sec

Enter # strings to insert into Java's HashMap: 10000
Java's Built-in HashMap: 1.38 sec
--
Enter # strings to insert into your MyHashMap: 20000
class MyHashMap: 2.78 sec

Enter # strings to insert into Java's HashMap: 20000
Java's Built-in HashMap: 2.77 sec
--


